#!/usr/bin/env node
var async = require("async");
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 5000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// var io = require('socket.io')({
//     log: false,
//     agent: false,
//     origins: '*:*',
//     transports: ['websocket', 'htmlfile', 'xhr-polling', 'jsonp-polling', 'polling']
// });
// io.listen(server);

var io = require('socket.io').listen(server,{log: 10,"transport":['websocket','xhr-polling'],"polling duration":10,'origins':'*:*'});



var _ALONE_={
};

var MALE_BOX=[];
var FEMALE_BOX=[];

io.on('connection', function(client){
  console.log("Connect");

  client.on("disconnect",function(data,callback){
     console.log("disconnect");
     try{
      delete _ALONE_['all']['male'][client.id];
      delete _ALONE_['all']['female'][client.id];
      

      MALE_BOX.splice(MALE_BOX.indexOf(client.id), 1);
      FEMALE_BOX.splice(FEMALE_BOX.indexOf(client.id), 1);

     }catch(err){

     }
     //console.log(_ALONE_);
  });

  client.on("leave_session",function(data,callback){
    console.log("Leave session");
    try{
      delete _ALONE_['all']['male'][client.id];
      delete _ALONE_['all']['female'][client.id];
      

      MALE_BOX.splice(MALE_BOX.indexOf(client.id), 1);
      FEMALE_BOX.splice(FEMALE_BOX.indexOf(client.id), 1);

     }catch(err){

     }

  });

  //console.log(client.id);
  client.on("chat",function(data,callback){
      /*check parameters*/
      async.waterfall([
         function(recall){
           /*check parameter*/
           if(typeof(data.type)=="undefined" || typeof(data.my_id)=="undefined" || typeof(data.mate_id)=="undefined" || typeof(data.chat_text)=="undefined"){
            recall({err:"Parameter missing"},{});
           }else{
            if(data.type=="text"){
              io.to(data.mate_id).emit("chat_text",data);
            }else{
              io.to(data.mate_id).emit("chat_svg",data);
            }
            recall(null,{});
           }
         }         
      ],function(err,results){
         if(err){
           console.log(err);
         }
      });
  });

  client.on("pic",function(data,callback){
    /*Not in first release*/
  });

  client.on("exchange_profile_pic",function(data,callback){
    io.to(data.socket_id).emit("exchange_profile_pic",data);
  });

  client.on("match_accept",function(data,callback){
    console.log("Accept....");
    console.log(data);
    io.to(data.socket_id).emit("match_accept",data);
  });


  client.on("match_reject",function(data,callback){
    console.log("Accept....");
    console.log(data);

    io.to(data.socket_id).emit("match_reject",data);
    // if(data.preference=="male"){
    //  io.to(data.socket_id).emit("match_reject",data);
    // }else{
    //  io.to(data.socket_id).emit("match_reject",data);
    // }
  });


  client.on("leave_current_mate",function(data,callback){
     var mate_id = data.mate_id;

     
     io.to(mate_id).emit("leave_current_mate",{});

     try{
      delete _ALONE_['all']['male'][client.id];
      delete _ALONE_['all']['female'][client.id];


      

     }catch(err){

     }

     console.log(_ALONE_);
     callback({});
     
  });

  client.on("search",function(data,callback){
    /*search by preference who inside pool and waiting*/
    async.waterfall([
      function(recall){
        /*check*/
        console.log("search == =");
        console.log(data);
        if(typeof(data.my_id)=="undefined" ||  typeof(data.did)=="undefined" || typeof(data.region)=="undefined" || typeof(data.username)=="undefined" || typeof(data.bio)=="undefined" || typeof(data.preference)=="undefined"){
          recall("Parameter Missing",{});
        }else{

           console.log("Alone");
           console.log(_ALONE_);

           console.log("Male");
           console.log(MALE_BOX);

           console.log("FeMale");
           console.log(FEMALE_BOX);

           if(data.preference=="female"){
            var flag=0;


            /*Check is this female found*/
            var pop_female=0;
            while(FEMALE_BOX.length>0){
               pop_female = FEMALE_BOX.shift();
               console.log("%%%%");
               console.log(pop_female);
               console.log("%%%%");

               if(pop_female){
                console.log("Female pop");
                 break;
               }
            }

            console.log("^^^^^^^^^^^^^^^^^^^^^^^");
            console.log(pop_female);
            console.log("^^^^^^^^^^^^^^^^^^^^^^^");


            if(io.sockets.sockets[pop_female]!=undefined){


              //MALE_BOX.splice(MALE_BOX[client.id], 1);
              MALE_BOX.splice(MALE_BOX.indexOf(client.id), 1);
              //delete MALE_BOX[client.id];
              //delete FEMALE_BOX[client.id];

              console.log("Female Found..........");


              console.log("^&&&&&&&&&&&&");
              console.log(MALE_BOX);
              console.log(FEMALE_BOX);
              console.log("^&&&&&&&&&&&&");


              io.to(pop_female).emit("stranger_found",data);
              client.emit("stranger_found_confirm",_ALONE_['all']['female'][pop_female]);
                


            }else{
              console.log("Socket not connected "+Object.keys(io.sockets.connected).length);
            }

            recall(null,{entry:pop_female});
            
           }else{
            
            var flag=0;



            /*Check is this female found*/
            
            var pop_male=0;
            while(MALE_BOX.length>0){


               pop_male = MALE_BOX.shift();

               console.log("%%%%");
               console.log(pop_male);
               console.log("%%%%");

               if(pop_male){
                 console.log("Pop male");

                 break;
               }
            }

            console.log("^^^^^^^^^^^^^^^^^^^^^^^");
            console.log(pop_male);
            console.log("^^^^^^^^^^^^^^^^^^^^^^^");

            if(io.sockets.sockets[pop_male]!=undefined){
                

                console.log("MALE Found..........");
              io.to(pop_male).emit("stranger_found",data);




              //delete MALE_BOX[client.id];
              //delete FEMALE_BOX[client.id];

              


              FEMALE_BOX.splice(FEMALE_BOX.indexOf(client.id), 1);

              console.log("^&&&&&&&&&&&&");
              console.log(MALE_BOX);
              console.log(FEMALE_BOX);
              console.log("^&&&&&&&&&&&&");

              client.emit("stranger_found_confirm",_ALONE_['all']['male'][pop_male]);


            }else{
              console.log("Socket not connected "+Object.keys(io.sockets.connected).length);
            }


            /*Pop from array female*/


            

            //FEMALE_BOX.splice(FEMALE_BOX[client.id], 1);
            recall(null,{entry:pop_male});
           }
           
        }
      }
    ],function(err,results){
       if(err){
        callback({status:0,err:err});
       }else{
        // if(data.preference=="male"){
        //   FEMALE_BOX.splice(MALE_BOX[client.id], 1);
        // }else{
        //   MALE_BOX.splice(MALE_BOX[client.id], 1);
        // }
        callback({status:1,entry:results.entry});
       }
    });
  });

  client.on("register",function(data,callback){
    console.log("Register");

    

    async.waterfall([
      function(recall){
        /*check*/
        if(typeof(data.did)=="undefined" || typeof(data.region)=="undefined" || typeof(data.username)=="undefined" || typeof(data.bio)=="undefined" || typeof(data.preference)=="undefined"){
          recall("Parameter Missing",{});
        }else{
           if(data.preference=="female"){

             if(_ALONE_[data.region]){
              if(_ALONE_[data.region]['male']){
                _ALONE_[data.region]['male'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }else{
                _ALONE_[data.region]['male']={};
                _ALONE_[data.region]['male'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }

             }else{
              _ALONE_[data.region]={};

              if(_ALONE_[data.region]['male']){
                
                _ALONE_[data.region]['male'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }else{
                _ALONE_[data.region]['male']={};
                _ALONE_[data.region]['male'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }
             }

             /*Push into*/
             //if(data.region=="india"){
              //console.log("PUSH into india");
              MALE_BOX.push(client.id);
              console.log("Male pushed");
              console.log(MALE_BOX);

             //}else{
              //console.log("Rest country not allow");
             //}
            
           }else{
             if(_ALONE_[data.region]){
              if(_ALONE_[data.region]['female']){
                _ALONE_[data.region]['female'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }else{
                _ALONE_[data.region]['female']={};
                _ALONE_[data.region]['female'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }
             }else{
              _ALONE_[data.region]={};

              if(_ALONE_[data.region]['female']){
                
                _ALONE_[data.region]['female'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }else{
                _ALONE_[data.region]['female']={};
                _ALONE_[data.region]['female'][client.id]={socket_id:client.id,did:data.did,name:data.username,bio:data.bio}; 
              }
             }  

             //if(data.region=="india"){
              //console.log("PUSH into india");
              //console.log("Female pushed");
              FEMALE_BOX.push(client.id); 
              console.log("Female pushed");
              console.log(FEMALE_BOX);
             //}else{
              //console.log("Rest country not allow");
             //}
           }

           /**/
           // var female_count = Object.keys(_ALONE_[data.region]['female']).length;
           // var male_count = Object.keys(_ALONE_[data.region]['male']).length;

          
           var live_user_count =  Object.keys(io.sockets.connected).length;
           var female_count = FEMALE_BOX.length;
           var male_count = MALE_BOX.length;

           recall(null,{live_user_count:live_user_count,female_count:female_count,male_count:male_count});
        }
      }
    ],function(err,results){
       if(err){
        callback({status:0,err:err});
       }else{

        //console.log(MALE_BOX);
        //console.log(FEMALE_BOX);
        callback({status:1,live_user_count:results.live_user_count,male_count:results.male_count,female_count:results.female_count});
       }
    });
  });
});

/*****************************************Me-Alone*****************************************/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




// for(var i =0;i<array.length;i++){
//   console.log("i = "+array[i]);


// var file = fs.createWriteStream("file.jpg");
// var request = http.get("http://i3.ytimg.com/vi/J---aiyznGQ/mqdefault.jpg", function(response) {
//       response.pipe(file);
//     });


// }


/*Testing area*/
